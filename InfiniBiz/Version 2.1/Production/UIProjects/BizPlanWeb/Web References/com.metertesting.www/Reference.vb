'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2379
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2379.
'
Namespace com.metertesting.www
    
    '<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MeterViewServiceSoap", [Namespace]:="http://www.MeterTesting.com")>  _
    Public Class MeterViewService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "https://accounts.infinibiz.com/MeterTesting/MeterViewService.asmx"
        End Sub
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/HelloWorld", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginHelloWorld(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("HelloWorld", New Object(-1) {}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndHelloWorld(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/getMessage", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMessage() As String
            Dim results() As Object = Me.Invoke("getMessage", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BegingetMessage(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMessage", New Object(-1) {}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndgetMessage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/getMessage1", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMessage1(ByRef Dat As String) As String
            Dim results() As Object = Me.Invoke("getMessage1", New Object() {Dat})
            Dat = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BegingetMessage1(ByVal Dat As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMessage1", New Object() {Dat}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndgetMessage1(ByVal asyncResult As System.IAsyncResult, ByRef Dat As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Dat = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/GetSingleNodesXML", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingleNodesXML(ByVal PRODUCT_ID As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal SingleAnalysisOption As String) As String
            Dim results() As Object = Me.Invoke("GetSingleNodesXML", New Object() {PRODUCT_ID, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, SingleAnalysisOption})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginGetSingleNodesXML(ByVal PRODUCT_ID As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal SingleAnalysisOption As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSingleNodesXML", New Object() {PRODUCT_ID, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, SingleAnalysisOption}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetSingleNodesXML(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/GetMultipleNodesXML", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultipleNodesXML(ByVal PRODUCT_IDs As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal MultiAnalysisOption As String) As String
            Dim results() As Object = Me.Invoke("GetMultipleNodesXML", New Object() {PRODUCT_IDs, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, MultiAnalysisOption})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginGetMultipleNodesXML(ByVal PRODUCT_IDs As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal MultiAnalysisOption As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMultipleNodesXML", New Object() {PRODUCT_IDs, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, MultiAnalysisOption}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetMultipleNodesXML(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/GetSingleNodesXML_Basic", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingleNodesXML_Basic(ByVal PRODUCT_ID As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal SingleAnalysisOption As String, ByVal StartInterval As String, ByVal EndInterval As String, ByVal ChkInterval As Boolean) As String
            Dim results() As Object = Me.Invoke("GetSingleNodesXML_Basic", New Object() {PRODUCT_ID, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, SingleAnalysisOption, StartInterval, EndInterval, ChkInterval})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginGetSingleNodesXML_Basic(ByVal PRODUCT_ID As String, ByVal Planid As String, ByVal Customerid As String, ByVal ProSdate As String, ByVal ProEdate As String, ByVal PlanSdate As String, ByVal PlanEdate As String, ByVal getCurrency As String, ByVal SingleAnalysisOption As String, ByVal StartInterval As String, ByVal EndInterval As String, ByVal ChkInterval As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSingleNodesXML_Basic", New Object() {PRODUCT_ID, Planid, Customerid, ProSdate, ProEdate, PlanSdate, PlanEdate, getCurrency, SingleAnalysisOption, StartInterval, EndInterval, ChkInterval}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetSingleNodesXML_Basic(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/GetMerchantMeters", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMerchantMeters(ByVal Customerid As String, ByVal Fromdate As String, ByVal Todate As String, ByVal Fromdatelastday As String, ByVal Todatedaylastday As String, ByVal getCurrency As String) As String
            Dim results() As Object = Me.Invoke("GetMerchantMeters", New Object() {Customerid, Fromdate, Todate, Fromdatelastday, Todatedaylastday, getCurrency})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginGetMerchantMeters(ByVal Customerid As String, ByVal Fromdate As String, ByVal Todate As String, ByVal Fromdatelastday As String, ByVal Todatedaylastday As String, ByVal getCurrency As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMerchantMeters", New Object() {Customerid, Fromdate, Todate, Fromdatelastday, Todatedaylastday, getCurrency}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndGetMerchantMeters(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/Calme", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Calme(ByVal str As String) As String
            Dim results() As Object = Me.Invoke("Calme", New Object() {str})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginCalme(ByVal str As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Calme", New Object() {str}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndCalme(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.MeterTesting.com/LoadEnterpriseMeters", RequestNamespace:="http://www.MeterTesting.com", ResponseNamespace:="http://www.MeterTesting.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadEnterpriseMeters(ByVal Customerid As String, ByVal strStartDate As String, ByVal strEndDate As String, ByVal strStartLastDate As String, ByVal strEndLastDate As String, ByVal getCurrency As String, ByVal strType As String) As String
            Dim results() As Object = Me.Invoke("LoadEnterpriseMeters", New Object() {Customerid, strStartDate, strEndDate, strStartLastDate, strEndLastDate, getCurrency, strType})
            Return CType(results(0),String)
        End Function
        
        '<remarks/>
        Public Function BeginLoadEnterpriseMeters(ByVal Customerid As String, ByVal strStartDate As String, ByVal strEndDate As String, ByVal strStartLastDate As String, ByVal strEndLastDate As String, ByVal getCurrency As String, ByVal strType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadEnterpriseMeters", New Object() {Customerid, strStartDate, strEndDate, strStartLastDate, strEndLastDate, getCurrency, strType}, callback, asyncState)
        End Function
        
        '<remarks/>
        Public Function EndLoadEnterpriseMeters(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
    End Class
End Namespace
